// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: chLamLib/chLam.proto

package chLamProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChandyLamportSnapshot_ChLamSnapshot_FullMethodName = "/ChandyLamportSnapshot/ChLamSnapshot"
)

// ChandyLamportSnapshotClient is the client API for ChandyLamportSnapshot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChandyLamportSnapshotClient interface {
	ChLamSnapshot(ctx context.Context, in *ChLamPeer, opts ...grpc.CallOption) (*ChLamPeer, error)
}

type chandyLamportSnapshotClient struct {
	cc grpc.ClientConnInterface
}

func NewChandyLamportSnapshotClient(cc grpc.ClientConnInterface) ChandyLamportSnapshotClient {
	return &chandyLamportSnapshotClient{cc}
}

func (c *chandyLamportSnapshotClient) ChLamSnapshot(ctx context.Context, in *ChLamPeer, opts ...grpc.CallOption) (*ChLamPeer, error) {
	out := new(ChLamPeer)
	err := c.cc.Invoke(ctx, ChandyLamportSnapshot_ChLamSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChandyLamportSnapshotServer is the server API for ChandyLamportSnapshot service.
// All implementations must embed UnimplementedChandyLamportSnapshotServer
// for forward compatibility
type ChandyLamportSnapshotServer interface {
	ChLamSnapshot(context.Context, *ChLamPeer) (*ChLamPeer, error)
	mustEmbedUnimplementedChandyLamportSnapshotServer()
}

// UnimplementedChandyLamportSnapshotServer must be embedded to have forward compatible implementations.
type UnimplementedChandyLamportSnapshotServer struct {
}

func (UnimplementedChandyLamportSnapshotServer) ChLamSnapshot(context.Context, *ChLamPeer) (*ChLamPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChLamSnapshot not implemented")
}
func (UnimplementedChandyLamportSnapshotServer) mustEmbedUnimplementedChandyLamportSnapshotServer() {}

// UnsafeChandyLamportSnapshotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChandyLamportSnapshotServer will
// result in compilation errors.
type UnsafeChandyLamportSnapshotServer interface {
	mustEmbedUnimplementedChandyLamportSnapshotServer()
}

func RegisterChandyLamportSnapshotServer(s grpc.ServiceRegistrar, srv ChandyLamportSnapshotServer) {
	s.RegisterService(&ChandyLamportSnapshot_ServiceDesc, srv)
}

func _ChandyLamportSnapshot_ChLamSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChLamPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChandyLamportSnapshotServer).ChLamSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChandyLamportSnapshot_ChLamSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChandyLamportSnapshotServer).ChLamSnapshot(ctx, req.(*ChLamPeer))
	}
	return interceptor(ctx, in, info, handler)
}

// ChandyLamportSnapshot_ServiceDesc is the grpc.ServiceDesc for ChandyLamportSnapshot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChandyLamportSnapshot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChandyLamportSnapshot",
	HandlerType: (*ChandyLamportSnapshotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChLamSnapshot",
			Handler:    _ChandyLamportSnapshot_ChLamSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chLamLib/chLam.proto",
}
